{"version":3,"file":"static/js/4031.484bd294.chunk.js","mappings":"+RA2EA,EAlE8B,WAC1B,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAyBE,EAAAA,EAAAA,mBAAjBC,GAAkC,YAAtB,GACpB,GAAoCC,EAAAA,EAAAA,YAAU,eAAtCC,EAAS,KAAEC,EAAY,KACzBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACNC,SAASC,MAAQ,8BACjB,IAAMC,EAA4B,yCAAG,mFACjCL,GAASM,EAAAA,EAAAA,KAAW,IACpBC,YAAU,uBAAC,iGAUN,OAPGC,EAAYd,EAAae,IAAI,cACjB,WAAZlB,GACAmB,EAAYhB,EAAae,IAAI,aAC7BE,EAAUjB,EAAae,IAAI,YACR,WAAZlB,IACPmB,EAAYhB,EAAae,IAAI,cAC7BE,EAAU,GACb,SACoBC,EAAAA,EAAAA,IAAS,mBAAD,OAAoBrB,EAAO,6BAAqBmB,EAAS,oBAAYC,EAAO,sBAAcH,IAAY,OAAzH,GAAyH,WAA7HK,EAAI,EAAJA,MACGC,QAAQ,CAAD,gBACZjB,EAAagB,EAAKjB,WAClBI,GAASM,EAAAA,EAAAA,KAAW,IACpBN,GAASe,EAAAA,EAAAA,IAAiBF,EAAKG,eAC/BC,EAAAA,GAAAA,QAAcJ,EAAKK,KAAK,4BAEpBL,EAAKM,MAAM,CAAD,iCACJd,IAA+B,KAAD,2BAEpCL,GAASM,EAAAA,EAAAA,KAAW,IACpBW,EAAAA,GAAAA,MAAYJ,EAAKK,KAAK,4CAG/B,MAAM,2CACZ,kBA5BiC,mCA6BlCb,GACJ,GAAG,IAEH,IAAMe,EAAc,yCAAG,2GACER,EAAAA,EAAAA,KAAU,0BAA2B,CACtDhB,UAAAA,IACD,KAAD,YAFIiB,EAAI,EAAJA,MAGGC,SACLG,EAAAA,GAAAA,QAAcJ,EAAKK,KACnBpB,EAAS,eAETmB,EAAAA,GAAAA,MAAYJ,EAAKK,KACjBpB,EAAS,cACZ,2CACJ,kBAXmB,mCAapB,OACI,iBAAKuB,UAAU,oCAAmC,WAC9C,UAACC,EAAA,EAAM,CAACC,QAAQ,UAAUF,UAAU,OAAOG,QAASJ,EAAe,WAC/D,cAAGC,UAAU,mBAAqB,uBAEtC,UAACC,EAAA,EAAM,CAACC,QAAQ,SAASC,QAAS,kBAAM1B,EAAS,YAAY,EAAC,WAC1D,cAAGuB,UAAU,eAAiB,yBAI9C,C,uCCxEMI,EAAW,WACb,OAAOC,OAAOC,aAAaC,QAAQ,SAAWD,aAAaC,QAAQ,SAAW,IAClF,EAEMC,EAAOC,EAAAA,GAAAA,OAAa,CAEtBC,QAAS,WACTC,QAAS,KACTC,QAAS,CACLC,cAAc,UAAD,OAAYT,QAIjCI,EAAKM,aAAaC,QAAQC,KAAI,SAASC,GAEnC,OADAA,EAAOL,QAAQC,cAAa,iBAAaT,KAClCa,CACX,IACAT,EAAKM,aAAaI,SAASF,KAAI,SAASE,GACpC,OAAOA,CACX,IAAG,SAASC,GAKR,OAJ4B,MAAxBA,EAAID,SAASE,QAA0C,MAAxBD,EAAID,SAASE,QAA0C,MAAxBD,EAAID,SAASE,SAC3Ef,OAAOC,aAAae,QACpBhB,OAAOiB,SAASC,KAAO,UAEpBC,QAAQC,OAAON,EAC1B,IAEA,K","sources":["pages/users/PrivateBillingSuccess.jsx","services/Http.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setLoading, updateMembership } from \"../../store/reducers/userReducer\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\nimport Http from \"../../services/Http\";\r\nimport \"./PrivateBillingSuccess.css\";\r\n\r\nconst PrivateBillingSuccess = () => {\r\n    const { gateway } = useParams();\r\n    const [ searchParams ] = useSearchParams();\r\n    const [ invoiceId, setInvoiceId ] = useState();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        document.title = \"AnswerSheet - HSC made easy\";\r\n        const setPrivateBillingTransaction = async () => {\r\n            dispatch(setLoading(true));\r\n            setTimeout(async () => {\r\n                let paymentId;\r\n                let payerId;\r\n                let historyId = searchParams.get('history_id');\r\n                if (gateway === \"paypal\") {\r\n                    paymentId = searchParams.get(\"paymentId\");\r\n                    payerId = searchParams.get(\"PayerID\");\r\n                } else if (gateway === \"stripe\") {\r\n                    paymentId = searchParams.get(\"session_id\");\r\n                    payerId = 0;\r\n                }\r\n                let { data } = await Http.get(`private-billing/${gateway}/return?paymentId=${paymentId}&payerId=${payerId}&historyId=${historyId}`)\r\n                if (data.success) {\r\n                    setInvoiceId(data.invoiceId);\r\n                    dispatch(setLoading(false));\r\n                    dispatch(updateMembership(data.membershipId));\r\n                    toast.success(data.msg);\r\n                } else {\r\n                    if (data.retry) {\r\n                        await setPrivateBillingTransaction();\r\n                    } else {\r\n                        dispatch(setLoading(false));\r\n                        toast.error(data.msg);\r\n                    }\r\n                }\r\n            }, 2500);\r\n        }\r\n        setPrivateBillingTransaction();\r\n    }, []);\r\n\r\n    const receiveInvoice = async () => {\r\n        let { data } = await Http.post(\"private-billing/invoice\", {\r\n            invoiceId\r\n        });\r\n        if (data.success) {\r\n            toast.success(data.msg);\r\n            navigate(\"/subjects\");\r\n        } else {\r\n            toast.error(data.msg);\r\n            navigate(\"/subjects\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"private-billing-success-container\">\r\n            <Button variant=\"primary\" className=\"me-3\" onClick={receiveInvoice}>\r\n                <i className=\"fa fa-envelope\"></i> Receive invoice\r\n            </Button>\r\n            <Button variant=\"danger\" onClick={() => navigate(\"/subjects\")}>\r\n                <i className=\"fa fa-undo\"></i> Back to subjects\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrivateBillingSuccess;","import axios from \"axios\";\r\nconst getToken = () => {\r\n    return window.localStorage.getItem(\"token\") ? localStorage.getItem(\"token\") : null;\r\n}\r\n\r\nconst http = axios.create({\r\n    // baseURL: \"http://localhost:5000/api/v1/\",\r\n    baseURL: \"/api/v1/\",\r\n    timeout: 15000,\r\n    headers: {\r\n        Authorization: `Bearer ${getToken()}`\r\n    }\r\n});\r\n\r\nhttp.interceptors.request.use(function(config) {\r\n    config.headers.Authorization = `Bearer ${getToken()}`;\r\n    return config;\r\n});\r\nhttp.interceptors.response.use(function(response) {\r\n    return response;\r\n}, function(err) {\r\n    if (err.response.status === 401 || err.response.status === 403 || err.response.status === 406) {\r\n        window.localStorage.clear();\r\n        window.location.href = \"/login\";\r\n    } \r\n    return Promise.reject(err);\r\n});\r\n\r\nexport default http;"],"names":["gateway","useParams","useSearchParams","searchParams","useState","invoiceId","setInvoiceId","navigate","useNavigate","dispatch","useDispatch","useEffect","document","title","setPrivateBillingTransaction","setLoading","setTimeout","historyId","get","paymentId","payerId","Http","data","success","updateMembership","membershipId","toast","msg","retry","receiveInvoice","className","Button","variant","onClick","getToken","window","localStorage","getItem","http","axios","baseURL","timeout","headers","Authorization","interceptors","request","use","config","response","err","status","clear","location","href","Promise","reject"],"sourceRoot":""}